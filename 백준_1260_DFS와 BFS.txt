import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Test {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt(); //정점의 개수 (1 ≤ N ≤ 1,000)
		int M = sc.nextInt(); //간선의 개수(1 ≤ M ≤ 10,000)
		int V = sc.nextInt(); //탐색을 시작할 정점
		int[][] arr = new int[N+1][N+1];
		for(int i = 0; i < M; i++) { //인접행렬, 간선은 양방향
			int a = sc.nextInt();
			int b = sc.nextInt();
			arr[a][b] = 1;
			arr[b][a] = 1;
		}
		
//		for(int[] a : arr)
//			System.out.println(Arrays.toString(a));
		
		//dfs
		dfs(arr, new boolean[N+1], V);
		System.out.println();
		//bfs
		bfs(arr, new boolean[N+1], V);
	}
	
	static void dfs(int[][] arr, boolean[] visited, int v) {
		visited[v] = true;
		System.out.print(v+" ");
		for(int i = 1; i < arr.length; i++) { //정점의 개수만큼 돌면서 간선이 연결되어 있는지 확인
			if(arr[v][i]==1&&!visited[i]) {
				dfs(arr, visited, i);
			}
		}
	}
	
	static void bfs(int[][] arr, boolean[] visited, int v) {
		Queue<Integer> q = new LinkedList<>();
		q.add(v);
		visited[v] = true;
		while(!q.isEmpty()) {
			int temp = q.poll();
			System.out.print(temp+" ");
			for(int i = 1; i < arr.length; i++) {
				if(arr[temp][i]==1&&!visited[i]) {
					q.add(i);
					visited[i] = true;
				}
			}
		}
	}
}
