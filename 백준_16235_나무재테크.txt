package other;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	
	static int N, M, K;
	static int[][] map, A;
	static int[] dr = {-1, 1, 0, 0, -1, -1, 1, 1};
	static int[] dc = {0, 0, -1, 1, -1, 1, -1, 1};
	static PriorityQueue<Tree>[][] treeMap;
	static Queue<Tree> deadQ = new LinkedList<>();
	static Queue<Tree> breedQ = new LinkedList<>();
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		//1 ≤ 입력으로 주어지는 나무의 나이 ≤ 10
		N = sc.nextInt(); 		//1 ≤ N ≤ 10
		M = sc.nextInt(); 		//1 ≤ M ≤ N^2, 상도가 심은 나무의 정보
		K = sc.nextInt();		//1 ≤ K ≤ 1,000
		map = new int[N][N];
		A = new int[N][N];
		treeMap = new PriorityQueue[N][N];
		
		//가장 처음에 양분은 모든 칸에 5만큼 들어있다.
		
		//겨울에 추가되는 양분
		for(int i = 0; i < N; i++) {
			Arrays.fill(map[i], 5);
			for(int j = 0; j < N; j++) {
				A[i][j] = sc.nextInt();
				map[i][j] = 5;
				treeMap[i][j] = new PriorityQueue<>();
			}
			//System.out.println(Arrays.toString(map[i]));
		}
		
		for(int i = 0; i < M; i++) {
			int r = sc.nextInt() - 1;
			int c = sc.nextInt() - 1;
			int val = sc.nextInt();
			Tree tree = new Tree(r, c, val);
			treeMap[r][c].add(tree);
//			System.out.println(tree);
		}
		
		//봄
			//자신의 나이만큼 양분을 먹고, 나이가 1증가
			//하나의 칸에 여러개의 나무가 있다면, 나이가 어린 나무부터 양분을 먹는다.
			//만약, 땅에 양분이 부족해 자신의 나이만큼 양분을 먹을 수 없는 경우 즉시 죽는다.
		for(int k = 0; k < K; k++) {
			deadQ = new LinkedList<>();
			breedQ = new LinkedList<>();
			//봄
			for(int i = 0; i < N; i++) {
				for(int j = 0; j < N; j++) {
					for(int s = 0; s < treeMap[i][j].size(); s++) {
						Tree t = treeMap[i][j].poll();
//						System.out.println(t);
						if(t.age <= map[i][j]) {
							map[i][j] -= t.age;
							t.age++;
							treeMap[i][j].add(t);
							breedQ.add(t);
						}else {
							deadQ.add(t);
						}
					}
				}
			}
			
			//여름
			//봄에 죽은 나무가 양분으로 변함,
			//각각은 죽은 나무마다 나이를 2로 나눈 값이 나무에 있던 칸에 양분으로 추가
			for(int i = 0; i < deadQ.size(); i++) {
				Tree t = deadQ.poll();
				map[t.r][t.c] += (t.age/2);
			}
			
			//가을
			//번식하는 나무는 나이가 5의 배수이며, 인접한 8개의 칸에 나이가 1인 나무가 생긴다.
			for(int i = 0; i < breedQ.size(); i++) {
				Tree t = breedQ.poll();
				for(int ii = 0; ii < 8; ii++) {
					int nr = t.r + dr[ii];
					int nc = t.c + dc[ii];
					if(0 <= nr && nc < N && 0 <= nc && nc < N && t.age % 5 == 0) {
						treeMap[nr][nc].add(new Tree(nr, nc, 1));
					}
				}
			}
			
			//겨울
			//땅에 양분을 추가
			for(int i = 0; i < N; i++) {
				for(int j = 0; j < N; j++) {
					map[i][j] += A[i][j];
				}
			}
		}
		
		
		int ans = 0;
		//K년 지난 후 상도의 땅에 살아있는 나무의 개수
		for(int i = 0; i < N; i++) {
			for(int j = 0; j < N; j++) {
				ans += treeMap[i][j].size();
			}
		}
		System.out.println(ans);
	}
	
	static class Tree implements Comparable<Tree>{
		int r;
		int c;
		int age;
		Tree(int r, int c, int age){
			this.r = r;
			this.c = c;
			this.age = age;
		}
		@Override
		public String toString() {
			return "Tree [r=" + r + ", c=" + c + ", age=" + age + "]";
		}
		@Override
		public int compareTo(Tree o) {
			return this.age - o.age;
		}
		
	}
}