import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class Main {
	public static void main(String[] args) throws Exception{
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		map = new char[12][6];
		
		for(int i = 0; i < map.length; i++) {
			map[i] = br.readLine().toCharArray();
		}
//		for(char[] a : map) System.out.println(Arrays.toString(a));
		
		ans = 0;
		solve();
		System.out.println(ans);
	}
	
	static char[][] map;
	static int ans;
	static boolean chk;
	static boolean[][] visit;
	static ArrayList<Point> list;
	static void solve() {
		
		list = new ArrayList<>();
		
		while(true) {
			chk = false;
			for(int i = 0; i < map.length; i++) {
				for(int j = 0; j < map[i].length; j++) {
					if(map[i][j] != '.') {
						
						bfs(i, j);
						
						if(list.size() >= 4) {
							chk = true;
							for(Point po : list) {
								map[po.x][po.y] = '.';
							}
						}
					}
					list.clear();
				}
			}
			
			if(chk) {
				ans++;
				goGround();
			}
			else break;
		}
	}
	
	static Queue<Point> q;
	static int[] dx = {-1, 1, 0, 0};
	static int[] dy = {0, 0, -1, 1};
	static void bfs(int x, int y) {
		boolean[][] visit = new boolean[map.length][map[x].length]; 
		q = new LinkedList<>();
		q.add(new Point(x, y));
		list.add(new Point(x, y));
		visit[x][y] = true;
		
		char puyo = map[x][y];
		
		while(!q.isEmpty()) {
			
			Point p = q.poll();
			
			for(int i = 0; i < 4; i++){
				int nx = dx[i] + p.x;
				int ny = dy[i] + p.y;
				
				if(0 <= nx && nx < map.length && 0 <= ny && ny < map[nx].length) {
					
					if(map[nx][ny] == puyo && !visit[nx][ny]) {
						visit[nx][ny] = true;
						q.add(new Point(nx, ny));
						list.add(new Point(nx, ny));
					}
				}
				
			}
		}
	}
	
	static void goGround() {
		for(int j = 0; j < map[0].length; j++) {
			for(int i = map.length-1; i >= 0; i--) {
				if(map[i][j] == '.') {
					for(int ii = i-1; ii >= 0; ii--) {
						if(map[ii][j] != '.') {
							map[i][j] = map[ii][j];
							map[ii][j] = '.';
							break;
						}
					}
				}
			}
		}
	}
	
	static class Point{
		int x;
		int y;
		Point(int x, int y){
			this.x = x;
			this.y = y;
		}
	}
}
