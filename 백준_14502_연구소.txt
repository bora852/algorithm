import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main{
	static StringTokenizer st;
	static int N, M;
	static int[][] map;
	static Queue<Point> q;
	static boolean[][] visited;
	static int ans;
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken()); //(3 ≤ N, M ≤ 8)
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		for(int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		ans = Integer.MIN_VALUE;
		dfs(0);
		System.out.println(ans);
	}
	
	static void dfs(int cnt) {
		if(cnt == 3) {

			//맵복사
			visited = new boolean[N][M];
			for(int i = 0; i < N; i++) {
				for(int j = 0; j < M; j++) {
					if(map[i][j] != 0) visited[i][j] = true;
				}
			}
			
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					if (map[i][j] == 2) {
						dfs(i, j);
					}
				}
			}
			
			int num = 0;
			for(int i = 0; i < N; i++) {
				for(int j = 0; j < M; j++) {
					if(!visited[i][j]) num++;
				}
			}
			if(ans < num) ans = num;
			return;
		}
		
		for(int i = 0; i < N; i++) {
			for(int j = 0; j < M; j++) {
				if(map[i][j] == 0) {
					map[i][j] = 1;
					dfs(cnt+1);
					map[i][j] = 0;
				}
			}
		}
	}
	
	static int[] dr = {-1, 1, 0, 0};
	static int[] dc = {0, 0, -1, 1};
	private static void dfs(int y, int x) {
		
		for (int i = 0; i < 4; i++) {
			int ty = y + dr[i];
			int tx = x + dc[i];

			if (0 <= ty && ty < visited.length && 0 <= tx && tx < visited[0].length) {
				if (!visited[ty][tx]) {
					visited[ty][tx] = true; // 바이러스 확산
					dfs(ty, tx);
				}
			}
		}
	}
	
	static class Point{
		int r;
		int c;
		Point(int r, int c){
			this.r = r;
			this.c = c;
		}
	}
}