import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main{
	static StringTokenizer st;
	static int N, M;
	static int[][] map;
	static Queue<Point> q;
	static ArrayList<Point> list;
	static int ans;
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken()); //(3 ¡Â N, M ¡Â 8)
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		list = new ArrayList<>();
		for(int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if(map[i][j] == 2) list.add(new Point(i, j));
			}
		}
		
		ans = Integer.MIN_VALUE;
		dfs(0);
		System.out.println(ans);
	}
	
	static void dfs(int cnt) {
		if(cnt == 3) {

			//¸Êº¹»ç
			int[][] copy = new int[N][M];
			for(int i = 0; i < N; i++) {
				for(int j = 0; j < M; j++) {
					copy[i][j] = map[i][j];
				}
			}
			
			q = new LinkedList<Point>();
			for(int i = 0; i < list.size(); i++) {
				q.add(new Point(list.get(i).r, list.get(i).c));
			}
			
			bfs(copy);
			
//			for(int i = 0; i < N; i++) {
//				for(int j = 0; j < M; j++) {
//					System.out.print(copy[i][j]);;
//				}
//				System.out.println();
//			}
//			System.out.println();
//			
			int num = 0;
			for(int i = 0; i < N; i++) {
				for(int j = 0; j < M; j++) {
					if(copy[i][j] == 0) num++;
				}
			}
			
			if(ans < num) ans = num;
			return;
		}
		
		for(int i = 0; i < N; i++) {
			for(int j = 0; j < M; j++) {
				if(map[i][j] == 0) {
					map[i][j] = 1;
					dfs(cnt+1);
					map[i][j] = 0;
				}
			}
		}
	}
	
	static int[] dr = {-1, 1, 0, 0};
	static int[] dc = {0, 0, -1, 1};
	static void bfs(int[][] copy) {
		while(!q.isEmpty()) {
			Point p = q.poll();
			for(int i = 0; i < 4; i++) {
				int nr = p.r + dr[i];
				int nc = p.c + dc[i];
				if(0 <= nr && nr < N && 0 <= nc && nc < M) {
					if(copy[nr][nc] == 0) {
						copy[nr][nc] = 2;
						q.add(new Point(nr,nc));
					}
				}
			}
		}
	}
	
	static class Point{
		int r;
		int c;
		Point(int r, int c){
			this.r = r;
			this.c = c;
		}
	}
}