import java.util.Arrays;
import java.util.Scanner;

public class Solution{
	static int N, ans;
	static int[][] map;
	static int[][][] worm;
	static int[] dr = {0, -1, 1, 0, 0};
	static int[] dc = {0, 0, 0, -1, 1};
	public static void main(String[] args) throws Exception{
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		
		for(int tc = 1; tc <= T; tc++) {
			N = sc.nextInt();
			ans = 0;
			map = new int[N][N];
			worm = new int[11][2][3]; //[idx][0][2] -> 숫자이 이미 있는지 체크할 수를 9를 넣을것임.
			
			for(int i = 0; i < N; i++) {
				for(int j = 0; j < N; j++) {
					map[i][j] = sc.nextInt();
					if( 6 <= map[i][j] && map[i][j] <= 10) {
						if(worm[map[i][j]][0][2] != 9) {
							worm[map[i][j]][0][0] = i;
							worm[map[i][j]][0][1] = j;
							worm[map[i][j]][0][2] = 9; //체크
//							System.out.println("1");
//							System.out.println(worm[map[i][j]][0][0]+" "+worm[map[i][j]][0][1]+" "+map[i][j]);
						} else {
							worm[map[i][j]][1][0] = i;
							worm[map[i][j]][1][1] = j;
//							System.out.println("1");
//							System.out.println(worm[map[i][j]][1][0]+" "+worm[map[i][j]][1][1]+" "+map[i][j]);
						}
					}
				}
//				System.out.println(Arrays.toString(map[i]));
			}
			
			for(int i = 0; i < N; i++) {
				for(int j = 0; j < N; j++) {
					for(int d = 1; d <= 4; d++) {
						if(0 == map[i][j])
							solve(i, j, d);
					}
				}
			}
			System.out.println("#"+tc+" "+ans);
		}
	}
	
	static int nr;
	static int nc;
	static int ndir;
	static void solve(int startR, int startC, int dir) {
		int max = 0;
		boolean first = true;
		nr = startR;
		nc = startC;
		ndir = dir;
		
//		int cnt = 0;
		while(true) {
//			System.out.println(" sR : "+startR+" sC : "+startC+" nr : "+nr+" nc : "+nc+" dir : "+dir);
			
//			cnt++;
//			if(cnt == 20) break;
			
			nr += dr[ndir];
			nc += dc[ndir];
			
			//처음 위치인지 확인 또는 블랙홀인지 확인 --> 끝
			if(!isRange(nr, nc)){
				chageDir(5);
				max++;
			} else if(!first && startR == nr && startC == nc || map[nr][nc] == -1) { //벽인지 확인, 방향바꿔줌
				ans = Math.max(ans, max);
				break;
			} else if(1 <= map[nr][nc] && map[nr][nc] <= 5) {  //1 ~ 5 삼각형인지 확인, 방향 바꿔줌
				chageDir(map[nr][nc]);
				max++;
			} else if(6 <= map[nr][nc] && map[nr][nc] <= 10) { //6 ~ 10 웜홀인지 확인, 위치 바꿔주기
				int idx = map[nr][nc];
				if(worm[map[nr][nc]][0][0] == nr && worm[map[nr][nc]][0][1] == nc) {
					nr = worm[idx][1][0];
					nc = worm[idx][1][1];
				} else {
					nr = worm[idx][0][0];
					nc = worm[idx][0][1];
				}
			}
			
			if(first) first = false;
		}
		
	}
	
	static void chageDir(int num) {
		if(num == 1) {
			if(ndir == 4) ndir = 3;
			else if(ndir == 1) ndir = 2;
			else if(ndir == 2) ndir = 4;
			else ndir = 1;
		} else if(num == 2) {
			if(ndir == 1) ndir = 4;
			else if(ndir == 2) ndir = 1;
			else if(ndir == 3) ndir = 2;
			else ndir = 3;
		} else if(num == 3) {
			if(ndir == 1) ndir = 3;
			else if(ndir == 2) ndir = 1;
			else if(ndir == 3) ndir = 4;
			else ndir = 2;
		} else if(num == 4) {
			if(ndir == 1) ndir = 2;
			else if(ndir == 2) ndir = 3;
			else if(ndir == 3) ndir = 4;
			else ndir = 1;
		} else {
			if(ndir == 1) ndir = 2;
			else if(ndir == 2) ndir = 1;
			else if(ndir == 3) ndir = 4;
			else ndir = 3;
		}
	}
	
	static boolean isRange(int r, int c) {
		return 0 <= r && r < N && 0 <= c && c < N;
	}
}
