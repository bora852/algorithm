import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static class point {
		int x, y;

		public point(int x, int y) {
			super();
			this.x = x;
			this.y = y;
		}

	}

	static int N, M, px, py;
	static int map[][];
	static int visit[][];
	static point start;
	static point end;
	static int dx[] = { 1, -1, 0, 0 };
	static int dy[] = { 0, 0, 1, -1 };

	static int solve() {
		Queue<point> que = new LinkedList<>();
		que.add(start);
		while (!que.isEmpty()) {
			point temp = que.poll();
			int x = temp.x;
			int y = temp.y;

			if (x == end.x && y == end.y) {
				return visit[y][x] - 1;
			}

			for (int i = 0; i < 4; i++) {
				int mx = x + dx[i];
				int my = y + dy[i];
				if (mx < 0 || my < 0 || mx > M - 1 || my > N - 1 || visit[my][mx] != 0 || map[my][mx] == 1) {
					continue;
				}
				boolean flag = true;
				if (i == 0) {
					for (int r = my; r <= my + py; r++) {
						if (r < 0 || mx + px > M - 1 || r > N - 1 || map[r][mx + px] == 1) {
							flag = false;
							break;
						}

					}
				}
				if (i == 1) {
					for (int r = my; r <= my + py; r++) {
						if (r < 0 || mx > M - 1 || r > N - 1 || map[r][mx] == 1) {
							flag = false;
							break;
						}

					}
				}
				if (i == 2) {
					for (int c = mx; c <= mx + px; c++) {
						if (c < 0 || c > M - 1 || my + py > N - 1 || map[my + py][c] == 1) {
							flag = false;
							break;
						}
					}

				}
				if (i == 3) {
					for (int c = mx; c <= mx + px; c++) {
						if (c < 0 || c > M - 1 || my > N - 1 || map[my][c] == 1) {
							flag = false;
							break;
						}
					}
				}
				if (flag) {
					visit[my][mx] = visit[y][x] + 1;
					que.add(new point(mx, my));
				}

			}
		}
		return -1;
	}

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		st = new StringTokenizer(br.readLine());
		py = Integer.parseInt(st.nextToken()) - 1;
		px = Integer.parseInt(st.nextToken()) - 1;
		int sy = Integer.parseInt(st.nextToken()) - 1;
		int sx = Integer.parseInt(st.nextToken()) - 1;
		int ey = Integer.parseInt(st.nextToken()) - 1;
		int ex = Integer.parseInt(st.nextToken()) - 1;
		visit = new int[N][M];
		visit[sy][sx] = 1;
		start = new point(sx, sy);
		end = new point(ex, ey);

		bw.write(solve() + "\n");
		bw.flush();
	}
}