import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static StringTokenizer st;
	static int N, M;
	static int H, W, Sr, Sc, Fr, Fc;
	static int[][] map;
	static int[] dr = { -1, 1, 0 ,0 };
	static int[] dc = { 0 , 0, -1, 1};
	static int ans;
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        map = new int[N][M];
        
        for(int i = 0; i < N; i++) {
        	st = new StringTokenizer(br.readLine());
        	for(int j = 0; j < M; j++) {
        		map[i][j] = Integer.parseInt(st.nextToken());
        	}
        }
        
        st = new StringTokenizer(br.readLine());
     
        H = Integer.parseInt(st.nextToken());
        W = Integer.parseInt(st.nextToken());
        Sr = Integer.parseInt(st.nextToken()) - 1;
        Sc = Integer.parseInt(st.nextToken()) - 1; 
        Fr = Integer.parseInt(st.nextToken()) - 1;
        Fc = Integer.parseInt(st.nextToken()) - 1;
        
//      for(int a[] : map) {
//    	System.out.println(Arrays.toString(a));
//      }
      
      ans = 0;
      if(chkAndDraw(Sr, Sc)) {
    	  solve();
      }
      System.out.println(ans == 0 ? -1 : ans);
     
    } 
    
    static void solve() {
    	//bfs에 담아서, 벽이 아닌 곳을 사방탐색한다. 
    	Queue<Point> q = new LinkedList<>(); 
    	boolean[][] visited= new boolean[N][M];
    	q.add(new Point(Sr, Sc, 0));
    	visited[Sr][Sc] = true;
    	
    	while(!q.isEmpty()) {
    		Point p = q.poll();
    		
    		if(p.r == Fr && p.c == Fc) { 
    			ans = p.cnt;
    			return;
    		}
    		
    		for(int i = 0; i < 4; i++) {
    			int nr = dr[i] + p.r;
    			int nc = dc[i] + p.c;
    			if(0 > nr || nr >= N || 0 > nc || nc >= M) continue;
    			//직사각형을 그려야하는 공간에 벽(1)이 없는지 살펴보자.
    			if(nr + H > N || nc + W > M || visited[nr][nc]) continue;
    			visited[nr][nc] = true;
    			if(chkAndDraw(nr, nc)) {
    				q.add(new Point(nr, nc, p.cnt + 1));
    			}
    		}
    	}
    	
    }
    
    static boolean chkAndDraw(int r, int c) {
//    	System.out.println("CHK"+" "+r+" "+c);
    	for(int i = r; i < r + H; i++) {
        	for(int j = c; j < c + W; j++) {
//        		if(0 > i || i >= N || 0 > j || j >= M) return false;
        		if(map[i][j] == 1) return false;
        	}
    	}
    	return true;
    }
    
    static class Point{
    	int r, c, cnt;
    	Point(int r, int c, int cnt){
    		this.r = r;
    		this.c = c;
    		this.cnt = cnt;
    	}
    }
}