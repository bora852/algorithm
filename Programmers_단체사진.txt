class Solution {
	static char[] friends = { 'A', 'C', 'F', 'J', 'M', 'N', 'R', 'T' };
	static String[] datas;
	static int ans;
	
	public int solution(int n, String[] data) {
		ans = 0;
		datas = data;
		dfs(0, new char[friends.length], new boolean[friends.length]);
		return ans;
	}
	
	boolean solve(char[] arr) {
		for(int i = 0; i < datas.length; i++) {
			int idxA = 0;
			int idxB = 0;
			char A = datas[i].charAt(0);
			char B = datas[i].charAt(2);
			char C = datas[i].charAt(3);
			int D = datas[i].charAt(4) - '0';
			for(int j = 0; j < arr.length; j++) {
				if(A == arr[j]) {
					idxA = j;
					break;
				}
			}
			for(int j = 0; j < arr.length; j++) {
				if(B == arr[j]) {
					idxB = j;
					break;
				}
			}
			
			int diff = Math.abs(idxA - idxB) - 1;
			if(C == '=') {
				if(D != diff) return false;
			} else if(C == '<') { 	//미만
 				if(D <= diff) return false;
			} else {				//초과
				if(D >= diff) return false;
			}
		}
		return true;
	}

	void dfs(int n, char[] arr, boolean[] visited) {
		if (n == friends.length) {
			if(solve(arr)) ans++;
			return;
		}

		for (int i = 0; i < friends.length; i++) {
			if(!visited[i]) {
				visited[i] = true;
				arr[n] = friends[i];
				dfs(n + 1, arr, visited);
				visited[i] = false;
			}
		}
	}
}

public class Programmers {
	public static void main(String[] args) {
		Solution sol = new Solution();
		System.out.println(sol.solution(2, new String[] { "N~F=0", "R~T>2" }));
	}
}