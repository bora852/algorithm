import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		char[][] map = new char[N][N];
		for(int i = 0; i < N; i++) {
			map[i] = sc.next().toCharArray();
		}
		
		boolean[][] visited = new boolean[N][N];
		//적록색약이 아닌 사람
		int aCnt = 0;
		for(int i = 0; i < N; i++) {
			for(int j = 0; j < N; j++) {
				if(!visited[i][j]) {
					bfs(map, i, j, visited);
					aCnt++;
				}
			}
		}
		
		//G을 R로 바꿈
		for(int i = 0; i < N; i++) {
			for(int j = 0; j < N; j++) {
				if(map[i][j] == 'G') {
					map[i][j] = 'R';
				}
			}
		}
		visited = new boolean[N][N];
		//적록색약인 사람.
		int bCnt = 0;
		for(int i = 0; i < N; i++) {
			for(int j = 0; j < N; j++) {
				if(!visited[i][j]) {
					bfs(map, i, j, visited);
					bCnt++;
				}
			}
		}
		
		System.out.println(aCnt+" "+bCnt);
	}
	
	static int[] dx = { -1, 1, 0, 0 };
	static int[] dy = { 0, 0, -1, 1 };
	static void bfs(char[][] map, int x, int y, boolean[][] visited) {
		Queue<Point> q = new LinkedList<>();
		q.add(new Point(x, y));
		visited[x][y] = true;
		
		while(!q.isEmpty()) {
			Point p = q.poll();
			for(int i = 0; i < 4; i++) {
				int nx = dx[i] + p.x;
				int ny = dy[i] + p.y;
				
				if(0 <= nx && nx < map.length && 0 <= ny && ny < map[nx].length) {
					if(map[p.x][p.y] == map[nx][ny] && !visited[nx][ny]) {
						
						q.add(new Point(nx, ny));
						visited[nx][ny] = true;
					}
				}
			}
		}
	}
}

class Point{
	int x;
	int y;
	Point(int x, int y){
		this.x = x;
		this.y = y;
	}
}

--------------------------------------------------------------------------------------------------191218

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	static int N, ans;
	static char[][] map;
	static boolean[][] visited;
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		N = sc.nextInt();
		map = new char[N][N];
		for(int i = 0; i < N; i++) {
			map[i] = sc.next().toCharArray();
			//System.out.println(Arrays.toString(map[i]));
		}
		
		for(int k = 0; k < 2; k++) {
			ans = 0;
			visited = new boolean[N][N];
			for(int i = 0; i < N; i++) {
				for(int j = 0; j < N; j++) {
					if(!visited[i][j]) {
						bfs(k, i, j);
						ans++;
					}
				}
			}
			System.out.print(ans+" ");
		}
	}
	
	static int[] dr = {1, -1, 0, 0};
	static int[] dc = {0, 0, -1, 1};
	static void bfs(int idx, int r, int c) {
		Queue<Point> q = new LinkedList<>();
		visited[r][c] = true;
		int point = map[r][c];
		q.add(new Point(r, c));
		
		while(!q.isEmpty()) {
			
			Point p = q.poll();
			
			for(int i = 0; i < 4; i++) {
				int nr = dr[i] + p.r;
				int nc = dc[i] + p.c;
				
				if(idx == 1 &&( map[r][c] == 'R' || map[r][c] == 'G')) {
					if(isRange(nr, nc) && !visited[nr][nc] && ( map[nr][nc] == 'R' || map[nr][nc] == 'G')) {
						q.add(new Point(nr, nc));
						visited[nr][nc] = true;
					}
				}else {
					if(isRange(nr, nc) && !visited[nr][nc] && map[nr][nc] == point) {
						q.add(new Point(nr, nc));
						visited[nr][nc] = true;
					}
				}
			}
		}
	}
	
	static boolean isRange(int r, int c) {
		return 0 <= r && r < N && 0 <= c && c < N;
	}
	
	static class Point{
		int r;
		int c;
		Point(int r, int c){
			this.r = r;
			this.c = c;
		}
	}
}
