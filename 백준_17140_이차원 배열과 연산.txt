import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	static int[][] map;
	static int r, c, k;
	static StringTokenizer st;
	static int R, C;
	static int ans;
	public static void main(String[] args) throws Exception{
//		Scanner sc = new Scanner(System.in);
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		st = new StringTokenizer(br.readLine());
		r = Integer.parseInt(st.nextToken());
		c = Integer.parseInt(st.nextToken());
		k = Integer.parseInt(st.nextToken());
		R = 3;
		C = 3;
		map = new int[101][101];
		for(int i = 1; i <= R; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 1; j <= C; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
//			System.out.println(Arrays.toString(map[i]));
		}
		
		ans = -1;
		solve();
		System.out.println(ans);
	}
	
	static void solve() {
		PriorityQueue<Point> q = new PriorityQueue<>();
		int cnt = 0;
		boolean rChk = true;
		int[] cntArr = new int[101];
		while(true) {
			cntArr = new int[101];
			if(cnt == 100) return;
			if(map[r][c] == k) {
				ans = cnt;
				return;
			}
			
			if(rChk) { //За
				for(int i = 1; i <= R; i++) {
					for(int j = 1; j <= C; j++) {
						
					}
				}
				
				
			}else { //ї­
				
				
			}
		
			
			cnt++;
		}
	}
	
	static class order implements Comparable<Point>{

		@Override
		public int compareTo(Point o) {
			return 0;
		}
		
	}
	
	static class Point{
		int r, c;
		Point(int r, int c){
			this.r = r;
			this.c = c;
		}
	}
}