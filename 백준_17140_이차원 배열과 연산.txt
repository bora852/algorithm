import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;


import java.util.Comparator;

public class Main {
	static StringTokenizer st;
	
	static int r, c, k, ans;
	static int R = 3, C = 3;
	static int[][] map = new int[101][101];
	
	public static void main(String[] args) throws Exception{
//		Scanner sc = new Scanner(System.in);
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		st = new StringTokenizer(br.readLine());
		
		r = Integer.parseInt(st.nextToken());
		c = Integer.parseInt(st.nextToken());
		k = Integer.parseInt(st.nextToken());
		
		for(int i = 1; i <= R; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 1; j <= C; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
//			System.out.println(Arrays.toString(map[i]));
		}
		
		ans = -1;
		solve();
		System.out.println(ans);
	}
	
	static int[] cntArr;
	static void solve() {
		int cnt = 0;
		boolean rChk = true;
//		int[] cntArr = new int[101];
		
		while(true) {
			
			if(map[r][c] == k) {
				ans = cnt;
				return;
			}
			
			if(cnt > 100) return;
			
			if(R >= C) {
				rChk = true;
			}
			else rChk = false;
			
			if(rChk) { //За
				int maxR = 2;
				for(int i = 1; i <= R; i++) {
					cntArr = new int[101];
					for(int j = 1; j <= C; j++) {
						cntArr[map[i][j]]++;
						map[i][j] = 0;
					}
					PriorityQueue<Point> q = sort();
					int k = 1;
					while(!q.isEmpty()){
						Point p = q.poll();
						map[i][k] = p.num;
						map[i][k+1] = p.cnt;
						k += 2; 
						if( k > 100 ) {
							break;
						}
					}
					
			        if(k-1 > maxR) maxR = k-1;
			      
				}
				C = maxR;
			}else { //ї­
				int maxC = 2;
				for(int j = 1; j <= C; j++) {
					cntArr = new int[101];
					for(int i = 1; i <= R; i++) {
						cntArr[map[i][j]]++;
						map[i][j] = 0;
					}
					PriorityQueue<Point> q = sort();
					int k = 1;
					while(!q.isEmpty()) {
						Point p = q.poll();
						map[k][j] = p.num;
						map[k + 1][j] = p.cnt;
						k += 2;
						if(k > 100) {
							break;
						}
					}
					 
					 if(k - 1 > maxC) maxC = k - 1;
				}
				R = maxC;
			}
			cnt++;
		}
	}
	
	  static PriorityQueue<Point> sort() {
		    PriorityQueue<Point> q = new PriorityQueue<Point>(new Order());
		    for (int i = 1; i <= 100; i++) {
		      if (cntArr[i] > 0) {
		        q.add(new Point(i, cntArr[i]));
		      }
		    }
		    return q;
	  }
	
	static class Order implements Comparator<Point>{

		@Override
		public int compare(Point o1, Point o2) {
			if(o1.cnt < o2.cnt) {
				return -1;
			}else if(o1.cnt == o2.cnt){
				if(o1.num < o2.num) {
					return -1;
				}else return 1;
			}else return 1;
		}
	}
	
	static class Point{
		int num, cnt;
		Point(int num, int cnt){
			this.num = num;
			this.cnt = cnt;
		}
	}
}