import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main{
	
	static int N, M;
	static int[][] map;
	static int ans = Integer.MAX_VALUE;
	static ArrayList<Point> chicken = new ArrayList<>();
	static ArrayList<Point> home = new ArrayList<>();
	static Point[] selected;
	static int len;
	static StringTokenizer st;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][N];
		selected = new Point[M];
		
		for(int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if(map[i][j] == 2) chicken.add(new Point(i, j));
				else if(map[i][j] == 1) home.add(new Point(i, j));
			}
		}
		
		len = chicken.size();
		solve(0, 0);
		System.out.println(ans);
	}
	
	static void solve(int idx, int cnt) {
		if(cnt == M) {
			int dist = 0;
			for(int j = 0; j < home.size(); j++) {
				Point p = home.get(j);
				int min = Integer.MAX_VALUE;
				for(int i = 0; i < M; i++) {
					Point c = selected[i];
					min = Math.min(min, getDistance(p.c, p.r, c.c, c.r));
				}
				dist += min;
			}
			ans = Math.min(ans, dist);
			return;
		}
		
		for(int i = idx; i < len; i++) {
			selected[cnt] = chicken.get(i);
			solve(i+1, cnt+1);
		}
	}
	
	static int getDistance(int x1, int y1, int x2, int y2) {
		return Math.abs(x1-x2) + Math.abs(y1-y2);
	}
}

class Point {
	int r;
	int c;
	Point(int r, int c){
		this.r = r;
		this.c = c;
	}
}