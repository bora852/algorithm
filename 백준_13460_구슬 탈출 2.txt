import java.util.Scanner;

public class Main {
	static int N, M;
	static int ans;
	static char[][] map;
	static boolean[][][][] visited;
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		N = sc.nextInt();
		M = sc.nextInt();
		visited = new boolean[N][M][N][M];
		map = new char[N][M];
		String temp = "";
		
		int Rr = 0, Rc = 0, Br = 0, Bc = 0;
		for(int i = 0; i < N; i++) {
			temp = sc.next();
			for(int j = 0; j < M; j++) {
				map[i][j] = temp.charAt(j);
				if(map[i][j] == 'B') {
					Br = i; Bc = j;
					map[i][j] = '.';
				}else if(map[i][j] == 'R') {
					Rr = i; Rc = j;
					map[i][j] = '.';
				}
			}
		}
		
		ans = 987654321;
		visited[Rr][Rc][Br][Bc] = true;
		solve(new Points(Rr, Rc, Br, Bc), 0);
		System.out.println(ans == 987654321 ? -1 : ans);
	}
	
	static int[] dr = {-1, 0, 1, 0};
	static int[] dc = {0, 1, 0, -1};
	static void solve(Points p, int cnt) {
		//10이상이면 종료
		if(cnt > 10) return;
		//파란구슬이 구멍에 빠지면 종료
		if(map[p.Br][p.Bc] == 'O') return;
		//빨간구슬이 구멍에 빠지면 종료
		if(map[p.Rr][p.Rc] == 'O') {
			ans = Math.min(ans, cnt);
			return;
		}
		
		//이동
		for(int i = 0; i < 4; i++) {
			int nRr = p.Rr;
			int nRc = p.Rc;
			int nBr = p.Br;
			int nBc = p.Bc;
			
			//빨간공 기울이기
			while(true) {
				if(map[nRr][nRc] == '#') {
					nRr -= dr[i];
					nRc -= dc[i];
					break;
				}else if(map[nRr][nRc] == 'O') {
					break;
				}
				
				nRr += dr[i];
				nRc += dc[i];
			}
			
			//파란공 기울이기
			while(true) {
				if(map[nBr][nBc] == '#') {
					nBr -= dr[i];
					nBc -= dc[i];
					break;
				}else if(map[nBr][nBc] == 'O') {
					break;
				}
				
				nBr += dr[i];
				nBc += dc[i];
			}
			
			//공 두개가 겹쳤다면? 위치 바꿔주기
			if(nRr == nBr && nRc == nBc && map[nBr][nBc] != 'O') {
				if(i == 0) { //위로
					if(p.Rr < p.Br) {
						nBr++;
					}else {
						nRr++;
					}
				}else if(i == 1) { //오른
					if(p.Rc < p.Bc) {
						nRc--;
					}else {
						nBc--;
					}
				}else if(i == 2) { //아래
					if(p.Rr < p.Br) {
						nRr--;
					}else {
						nBr--;
					}
				}else { //왼쪽
					if(p.Rc < p.Bc) {
						nBc++;
					}else {
						nRc++;
					}
				}
			}
			
			//이미 전에 빨간공과 파란공 둘 다 그 위치 그대로 방문한 적이 있는지? 없다면 재귀로
			if(!visited[nRr][nRc][nBr][nBc]) {
				visited[nRr][nRc][nBr][nBc] = true;
				solve(new Points(nRr, nRc, nBr, nBc), cnt+1);
				visited[nRr][nRc][nBr][nBc] = false;
			}
		}
	}
	
	static class Points{
		int Rr = 0, Rc = 0, Br = 0, Bc = 0;
		Points(int Rr, int Rc, int Br, int Bc){
			this.Rr = Rr;
			this.Rc = Rc;
			this.Br = Br;
			this.Bc = Bc;
		}
		
		@Override
		public String toString() {
			return Rr+" "+Rc+" "+Br+" "+Bc;
		}
		
	}
}