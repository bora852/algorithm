import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	
	static StringTokenizer st;
	static int[][] map;
	static boolean[][] visited;
	static ArrayList<Point> list;
	static int[] dr = {-1, 1, 0, 0};
	static int[] dc = {0, 0, -1, 1};
	static int N, L, R;
	static int ans;
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken()); 	//N*N땅
		L = Integer.parseInt(st.nextToken());	//L명이상
		R = Integer.parseInt(st.nextToken());	//R명이하
		
		map = new int[N][N];
		for(int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
//		for(int i = 0; i < N; i++)System.out.println(Arrays.toString(map[i]));
//		System.out.println();
		
		ans = 0;
		while(true) {
			chk = false;
			visited = new boolean[N][N];
			list = new ArrayList<>();
			for(int i = 0; i < N; i++) {
				for(int j = 0; j < N; j++) {
					if(!visited[i][j]) {
						bfs(i, j);
					}
				}
			}
			if(!chk) break;
			ans++;
		}
		
		System.out.println(ans);
	}
	
	static boolean chk;
	static void bfs(int r, int c) {
		Queue<Point> q = new LinkedList<>();
		visited[r][c] = true;
		list.add(new Point(r, c));
		q.add(new Point(r, c));
		int sum = map[r][c];

		while(!q.isEmpty()) {
			Point p = q.poll();
			for(int k = 0; k < 4; k++) {
				int nr = p.r + dr[k];
				int nc = p.c + dc[k];
				
				if(0 <= nr && nr < N && 0 <= nc && nc < N) {
					int tmp = Math.abs(map[p.r][p.c] - map[nr][nc]);
					if(!visited[nr][nc] && L <= tmp && tmp <= R) {
						list.add(new Point(nr, nc));
						q.add(new Point(nr, nc));
						visited[nr][nc] = true;
						chk = true;
						sum += map[nr][nc];
					}
				}
			}
		}
		
		if(list.size() > 1) {
			int tmp = sum/list.size();
			for(Point p : list) {
				map[p.r][p.c] = tmp;
			}
		}
		list.clear();
	}
	
	static class Point{
		int r;
		int c;
		int num;
		
		Point(int r, int c){
			this.r = r;
			this.c = c;
		}
	}
}