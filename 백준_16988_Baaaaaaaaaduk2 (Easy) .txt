import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
   static int N, M;
   static int[][] map;
   static int ans;
   static int[] dr = { -1, 1, 0, 0 };
   static int[] dc = { 0, 0, -1, 1 };
   static int chkCnt;
   static boolean[][] visited;
   static boolean isOk;
   public static void main(String[] args) {
      Scanner sc = new Scanner(System.in);
      N = sc.nextInt();
      M = sc.nextInt();
      map = new int[N][M];
      
      for(int i = 0; i < N; i++) {
         for(int j = 0; j < M; j++) {
            map[i][j] = sc.nextInt();
         }
      }
      ans = 0;
      solve(0, 0);
      System.out.println(ans);
   }
   
   static void solve(int cnt, int row) {
      if(cnt == 2) {
         int sum = 0;
         visited = new boolean[N][M];
         for(int i = 0; i < N; i++) {
            for(int j = 0; j < M; j++) {
            	chkCnt = 0;
               if(map[i][j] == 2 && !visited[i][j]) {
                  isOk = false;
                  chk(i, j);
                  if(!isOk) sum += chkCnt;
               }
            }
         }
         if(ans < sum) ans = sum;
         return;
      }
      
      for(int i = row; i < N; i++) {
         for(int j = 0; j < M; j++) {
            if(map[i][j] == 0) {
               map[i][j] = 1;
               solve(cnt + 1, i);
               map[i][j] = 0;
            }
         }
      }
   }
   
   static void chk(int r, int c) {
	  chkCnt = 1;
      Queue<Point> q = new LinkedList<>();
      q.add(new Point(r, c));
      visited[r][c] = true;
      
      while(!q.isEmpty()) {
         Point p = q.poll();
         for(int i = 0; i < 4; i++) {
            int nr = dr[i] + p.r;
            int nc = dc[i] + p.c;
            
            if(0 <= nr && nr < N && 0<= nc && nc < M && map[nr][nc] == 2 && !visited[nr][nc]) {
               q.add(new Point(nr, nc));
               visited[nr][nc] = true;
               chkCnt++;
            }else if(0 <= nr && nr < N && 0<= nc && nc < M && map[nr][nc] == 0 && !visited[nr][nc]) {
               isOk = true;
            }
         }
      }
   }
   
   static class Point{
      int r, c;
      Point(int r, int c){
         this.r = r;
         this.c = c;
      }
   }
}