public class Main {
	
	static int R;
	static int C;
	static int M;
	static Shark[] shark = new Shark[10001];
	static int[][] map;
	static StringTokenizer st;
	static int ans;
	static int[] dc = {0, 0, 0, 1, -1};
	static int[] dr = {0, -1, 1, 0, 0};
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		st = new StringTokenizer(br.readLine());
		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[R+1][C+1];
		for(int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int r = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());
			int s = Integer.parseInt(st.nextToken());
			int d = Integer.parseInt(st.nextToken());
			int z = Integer.parseInt(st.nextToken());
			shark[z] = new Shark(r, c, s, d, z);
			map[r][c] = z;
		}
		
//		for(int i = 0; i <= R; i++)
//			System.out.println(Arrays.toString(map[i]));

		ans = 0;
		for(int i = 1; i <= C; i++) {
			catchShark(i);
			moveShark();
		}
		
		System.out.println(ans);
	}
	
	static void catchShark(int r) {
		for(int i = 0; i <= R; i++) {
			if(map[i][r] != 0) {
				ans += map[i][r];
				shark[map[i][r]] = null;
				map[i][r] = 0;
				return;
			}
		}
	}
	
	static void moveShark() {
		
		//맵에 있던 상어 지우고, shark에 있는 상어들 이동시킴.
		for(int i = 1; i < 10001; i++) {
			if(shark[i] == null) continue;
			Shark sharks = shark[i];
			int nr = sharks.r;
			int nc = sharks.c;
			int dir = sharks.dir;
			int speed = sharks.speed;
			map[nr][nc] = 0;
			if(dir == 1 || dir == 2) {//1상,2하
				int move = speed % ( R * 2 - 2);
				while(move > 0) {
					if(nr == 1) {
						dir = 2;
					}
					if(nr == R) {
						dir = 1;
					}
					
					nr += dr[dir];  
					move--;
				}
				shark[i] = new Shark(nr, nc, speed, dir, sharks.size);
			}else {//3오,4왼
				int move = speed % ( C * 2 - 2);
				while(move > 0) {
					if(nc == 1) {
						dir = 3;
					}
					if(nc == C) {
						dir = 4;
					}
					
					nc += dc[dir];  
					move--;
				}
				shark[i] = new Shark(nr, nc, speed, dir, sharks.size);	
			}
		}
		
		//맵에 상어 배치, 2마리 이상이 같은 위치면 큰 상어가 자리 차지
		for(int i = 1; i < 10001; i++) {
			if(shark[i] == null) continue;
			Shark sharks = shark[i];
			if(map[sharks.r][sharks.c] < sharks.size) {
				shark[map[sharks.r][sharks.c]] = null;
				map[sharks.r][sharks.c] = sharks.size;
			}
		}
	}
	
	public static class Shark{
		int r;
		int c;
		int speed;
		int dir;
		int size;
		Shark(int r, int c, int s, int d, int z){
			this.r = r;
			this.c = c;
			this.speed = s;
			this.dir = d;
			this.size = z;
		}
	}
}