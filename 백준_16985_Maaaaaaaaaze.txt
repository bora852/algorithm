import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {

	// height층의 행열로 90도 회전시키는 함수
	static void rotate(int height) {
		int[][] tmp = new int[5][5];
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j < 5; j++) {
				tmp[j][5 - i - 1] = map[height][i][j];
			}
		}
		map[height] = tmp;
	}

	static int[][][] map = new int[5][5][5];
	static int ans = 987654321;

	public static void main(String[] args) {
		// 4의 5승 * 120 = 대략 10만 경우 정도의 케이스가 나옴.
		Scanner sc = new Scanner(System.in);
		for (int h = 0; h < 5; h++) {
			for (int i = 0; i < 5; i++) {
				for (int j = 0; j < 5; j++) {
					map[h][i][j] = sc.nextInt();
				}
			}
		}

		dfs(0);
		System.out.println(ans == 987654321 ? -1 : ans);
	}

	static int[] dr = { -1, 1, 0, 0, 0, 0 };
	static int[] dc = { 0, 0, -1, 1, 0, 0 };
	static int[] dh = { 0, 0, 0, 0, -1, 1 };

	static void findPath() {
		Queue<Point> q = new LinkedList<>();
		boolean[][][] visited = new boolean[5][5][5];
		q.add(new Point(0, 0, 0, 0));
		visited[0][0][0] = true;
		

		while (!q.isEmpty()) {
			Point p = q.poll();
			for (int i = 0; i < 6; i++) {
				int nr = dr[i] + p.r;
				int nc = dc[i] + p.c;
				int nh = dh[i] + p.h;

				if (p.h == 4 && p.r == 4 && p.c == 4) {
					count = p.cnt;
					
					if (p.cnt == 12) { // 최소 횟수 나와버리면 프로그램 끝내버리는 조건문
						System.out.println("12");
						System.exit(0); // 아예 이 프로그램 끝!!!
					}
					
					return;
				}

				if (0 <= nr && nr < 5 && 0 <= nc && nc < 5 && 0 <= nh && nh < 5) {
					if (!visited[nh][nr][nc] && map[nh][nr][nc] == 1) {
						q.add(new Point(nr, nc, nh, p.cnt + 1));
						visited[nh][nr][nc] = true;
					}
				}
			}
		}
	}

	static int count;
	static void perm(int idx) {
		if (idx == 5) {
			// 길찾기
			count = 987654321;
			if (map[0][0][0] == 1 && map[4][4][4] == 1)
				findPath();

			if (ans > count)
				ans = count;
			return;
		}
		for (int i = idx; i < 5; i++) {
			swap(i, idx);
			perm(idx + 1);
			swap(i, idx);
		}
	}

	static void swap(int a, int b) {
		int[][] tmp = map[a];
		map[a] = map[b];
		map[b] = tmp;
	}

	// 모든 회전 조합을 만드는 상태트리 재귀 함수
	static void dfs(int h_idx) {
		if (h_idx == 5) {
			// 마지막 층까지 다 세팅 완료, 120가지의 모든 층 변경을 따져볼 차례
			perm(0);
			return;
		}
		for (int i = 0; i < 4; i++) {
			rotate(h_idx); // 4번 돌면 원상복귀되니 백트랙킹을 하지 않아도됨.
			dfs(h_idx + 1);
		}
	}

	static class Point {
		int r, c, h, cnt;

		Point(int r, int c, int h, int cnt) {
			this.r = r;
			this.c = c;
			this.h = h;
			this.cnt = cnt;
		}
	}
}
