import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	
	static int N;
	static int K;
	static int min;
	static boolean[] visited;
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		
		visited = new boolean[100001];
		min = Integer.MAX_VALUE;
		solve();
		System.out.println(min);
	}
	
	static void solve() {
		Queue<Point> q = new LinkedList<>();
		q.add(new Point(N, 0));
		visited[N] = true;
		while(!q.isEmpty()) {
			Point p = q.poll();
			int n = p.n;
			int cnt = p.cnt;
			
			if(p.n == K) { 
				if(min > cnt) {
					min = cnt;
				}
				return;
			}
				
			if(isRange(n-1) && !visited[n-1]) {//X-1
				q.add(new Point(n-1, cnt+1));
				visited[n-1] = true;
			}
			
			if(isRange(n+1) && !visited[n+1]) {//X+1
				q.add(new Point(n+1, cnt+1));
				visited[n+1] = true;
			}
			
			if(isRange(2*n) && !visited[2*n]) {//2*X
				q.add(new Point(2*n, cnt+1));
				visited[2*n] = true;
			}
			
		}
	}
	
	static boolean isRange(int n) {
		return 0 <= n && n <= 100000;
	}
	
	static class Point{
		int n;
		int cnt;
		Point(int n, int cnt){
			this.n = n;
			this.cnt = cnt;
		}
	}
	
}