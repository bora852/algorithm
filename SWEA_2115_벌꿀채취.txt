import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class Solution_ {
	static int[][] map;
	static int N, M, C, ans;
	static boolean[][] visited;
	static int[] worker1, worker2;
	static ArrayList<Point> list;
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		//Scanner sc = new Scanner(src);
		int T = sc.nextInt();
		
		for(int tc = 1; tc <= T; tc++) {
			N = sc.nextInt(); //벌통크기
			M = sc.nextInt(); //선택할 수 있는 벌통의 개수
			C = sc.nextInt(); //꿀을 채취할 수 있는 최대 양
			map = new int[N][N];
			visited = new boolean[N][N];
			worker1 = new int[M];
			worker2 = new int[M];
			list = new ArrayList<>();
			for(int i = 0; i < N; i++) {
				for(int j = 0; j < N; j++) {
					map[i][j] = sc.nextInt();
				}
				//System.out.println(Arrays.toString(map[i]));
			}
			
			ans = 0;
			solve();
			getMaxAns();
			
			System.out.println("#"+tc+" "+ans);
		}
	}
	
	static void getMaxAns() {
		Collections.sort(list);
		int cnt = 0, sum = 0;
		for(int i = 0; i < list.size(); i++) {
			Point p = list.get(i);
			boolean isOk = false;
			for(int j = 0; j < p.c + M; j++) {
				if(visited[p.r][j]) {
					isOk = true;
					break;
				}
			}
			if(!isOk) {
				for(int j = 0; j < p.c + M; j++) {
					visited[p.r][j] = true;
				}
				sum += p.v;
				cnt++;
			}
			if(cnt == 2) {
				ans = sum;
				return;
			}
		}
	}
	
	static void solve() {
		//모든 벌꿀채취
		for(int i = 0; i < N; i++) {
			for(int j = 0; j < N; j++) {
				if(j + M <= N) {
					int v = getMax(i, j);
					list.add(new Point(i, j, v));
				}
			}
		}
	}
	
	//M개의 벌꿀 선택시 최대값을 가져오는 함수
	static int[] arr;
	static int getMax(int i, int j) {
		arr = new int[M];
		int cnt = 0;
		for(int jj = j; jj < j+M; jj++) {
			arr[cnt++] = map[i][jj];
		}
		
		max = 0;
		dfs(new boolean[M], 0, 0, 0);
		return max;
	}
	
	static int max;
	static void dfs(boolean[] visited, int k, int cnt, int sum) {
		for(int i = k; i < M; i++) {
			if(!visited[i] && cnt + arr[i] <= C) {
				visited[i] = true;
				int maxSum = sum + arr[i] * arr[i];
				max = Math.max(max, maxSum);
				dfs(visited, i, cnt + arr[i], maxSum);
				visited[i] = false;
			}
		}
	}
	
	static class Point implements Comparable<Point>{
		int r, c, v;
		Point(int r, int c, int v){
			this.r = r;
			this.c = c;
			this.v = v;
		}
		
		@Override
		public int compareTo(Point o) {
			return o.v - this.v;
		}
	}
	
	static String src = "10\r\n" + 
			"4 2 13\r\n" + 
			"6 1 9 7\r\n" + 
			"9 8 5 8\r\n" + 
			"3 4 5 3\r\n" + 
			"8 2 6 7\r\n" + 
			"3 3 10\r\n" + 
			"7 2 9\r\n" + 
			"6 6 6\r\n" + 
			"5 5 7\r\n" + 
			"4 1 10\r\n" + 
			"8 1 8 2\r\n" + 
			"4 6 1 6\r\n" + 
			"4 9 6 3\r\n" + 
			"7 4 1 3\r\n" + 
			"4 3 12\r\n" + 
			"8 8 6 5\r\n" + 
			"5 2 7 4\r\n" + 
			"8 5 1 7\r\n" + 
			"7 8 9 4\r\n" + 
			"5 2 11\r\n" + 
			"7 5 9 9 6\r\n" + 
			"7 3 7 9 3\r\n" + 
			"1 7 1 4 5\r\n" + 
			"1 7 9 2 6\r\n" + 
			"6 6 8 3 8\r\n" + 
			"6 3 20\r\n" + 
			"8 5 2 4 3 1\r\n" + 
			"4 3 6 1 1 8\r\n" + 
			"4 4 1 2 3 1\r\n" + 
			"1 7 4 9 6 1\r\n" + 
			"6 5 1 2 8 4\r\n" + 
			"3 1 4 5 1 3\r\n" + 
			"7 2 11\r\n" + 
			"2 8 2 5 2 8 6\r\n" + 
			"2 3 7 4 6 4 8\r\n" + 
			"3 7 8 3 9 4 4\r\n" + 
			"8 8 5 9 3 6 9\r\n" + 
			"9 7 6 2 4 1 3\r\n" + 
			"2 9 2 8 9 7 3\r\n" + 
			"2 1 7 2 7 8 3\r\n" + 
			"8 3 12\r\n" + 
			"9 1 6 7 5 4 6 7\r\n" + 
			"9 5 1 8 8 3 5 8\r\n" + 
			"5 2 6 8 6 9 2 1\r\n" + 
			"9 2 1 8 7 5 2 3\r\n" + 
			"6 5 5 1 4 5 7 2\r\n" + 
			"1 7 1 8 1 9 5 5\r\n" + 
			"6 2 2 9 2 5 1 4\r\n" + 
			"7 1 1 2 5 9 5 7\r\n" + 
			"9 4 20\r\n" + 
			"5 2 4 8 3 7 6 2 1\r\n" + 
			"7 9 8 5 8 2 6 3 6\r\n" + 
			"1 9 4 6 7 5 3 1 1\r\n" + 
			"4 4 7 6 2 2 8 1 7\r\n" + 
			"9 6 8 5 7 3 7 9 5\r\n" + 
			"7 3 1 4 1 1 8 5 3\r\n" + 
			"4 6 8 9 4 5 3 8 8\r\n" + 
			"1 3 4 2 4 1 1 3 6\r\n" + 
			"5 9 2 3 5 2 4 8 5\r\n" + 
			"10 5 30\r\n" + 
			"7 4 7 5 9 3 6 4 6 7\r\n" + 
			"8 9 8 4 5 7 8 9 2 9\r\n" + 
			"6 5 3 4 6 4 7 6 3 2\r\n" + 
			"4 7 4 3 4 7 3 3 4 3\r\n" + 
			"3 5 6 4 8 8 2 1 8 6\r\n" + 
			"3 7 9 7 1 7 6 2 8 9\r\n" + 
			"3 6 1 6 8 9 7 7 5 1\r\n" + 
			"4 3 5 6 2 1 2 6 3 6\r\n" + 
			"3 4 9 2 1 5 9 9 6 3\r\n" + 
			"9 9 7 3 7 5 5 5 8 4";
}
