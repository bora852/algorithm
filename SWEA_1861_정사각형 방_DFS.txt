import java.util.Arrays;
import java.util.Scanner;

public class Solution {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		
		for(int tc = 1; tc <=T; tc++) {
			int N = sc.nextInt();
			int[][] arr = new int[N][N];
			for(int i = 0; i < N; i++) {
				for(int j = 0; j < N; j++) {
					arr[i][j] = sc.nextInt();
				}
			}
			
//			for(int[] a : arr) {
//				System.out.println(Arrays.toString(a));
//			}
			
			int cnt = 1; //이동할 수 있는 방의 최대개수 
			roomNum = Integer.MAX_VALUE; //처음출발해야하는 방번호(값이 같으면 가장작은 방 번호)
			for(int i = 0; i < N; i++) {
				for(int j = 0; j < N; j++) {
					maxCnt = 1; 
					dfs(arr, i, j);
					if(maxCnt > cnt) { 
						cnt = maxCnt;
						roomNum = arr[i][j];
					}else if(maxCnt == cnt){
						roomNum = roomNum < arr[i][j] ? roomNum : arr[i][j];
					}
				}
			}
			
			System.out.println("#"+tc+" "+roomNum+" "+cnt);
		}
	}
	
	static int roomNum;
	static int maxCnt;
	static int[] dx = {-1, 1, 0, 0};
	static int[] dy = {0, 0, -1, 1};
	static void dfs(int[][] arr, int i, int j) {
	
		for(int k = 0; k < 4; k++) {
			int nx = i + dx[k];
			int ny = j + dy[k];
			
			if( 0 <= nx && nx < arr.length && 0 <= ny && ny < arr[nx].length) {
				if(arr[i][j]+1 == arr[nx][ny]) {
					dfs(arr, nx, ny);
					maxCnt++;
				}
			}
		}
	}
}