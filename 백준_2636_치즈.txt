import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;


public class Main {
    static int R, C, cnt;
    static int[][] map;
    static int[] dr = {1, -1, 0, 0};
    static int[] dc = {0, 0, -1, 1};
    static ArrayList<Point> o2list;     //공기 담을 list
    static ArrayList<Integer> cntList; //남는 갯수 담을 list
    static StringTokenizer st;
    public static void main(String[] args) throws NumberFormatException, IOException{
		
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		st = new StringTokenizer(br.readLine());
        R = Integer.parseInt(st.nextToken());
        C = Integer.parseInt(st.nextToken());
        map = new int[R][C];
        o2list = new ArrayList<>();
        cntList = new ArrayList<>();

        cnt = 0;
        for(int i = 0; i < R; i++){
        	st = new StringTokenizer(br.readLine().trim());
            for(int j = 0; j < C; j++){
                map[i][j] = Integer.parseInt(st.nextToken());
                if(map[i][j] == 1) cnt++;
            }
        }
        //치즈개수세기
        cntList.add(cnt);

        int time = 0;
        //반복
        while(true){
            spreadAir();  //공기뿌리기
            removeCheese();//치즈없애기
            time++;
            if(cnt == 0) break;
        }

//        for(int i = 0; i < R; i++){
//            System.out.println(Arrays.toString(map[i]));
//        }

        System.out.println(time);
        System.out.println(cntList.get(cntList.size()-2));
    }

    //치즈없애기 (0,0) bfs -> 2(공기)의 근접한 상하좌우에 치즈가 있다면 치즈를 없앤다.
    static void removeCheese(){
        for(int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                if (map[i][j] == 2) {
                    for (int k = 0; k < 4; k++) {
                        int nr = dr[k] + i;
                        int nc = dc[k] + j;

                        if (isRange(nr, nc) && map[nr][nc] == 1) {
                            map[nr][nc] = 0;
                            cnt--;
                        }
                    }
                }
            }
        }
        cntList.add(cnt);
    }

    //공기뿌리기 (0,0)  -> 공기 2  - bfs
    //2를 list에 다 담기
    static void spreadAir(){
        Queue<Point> q = new LinkedList<>();
        boolean[][] visited = new boolean[R][C];
        q.add(new Point(0, 0));
        visited[0][0] = true;
        map[0][0] = 2;
        while(!q.isEmpty()){
            Point p = q.poll();
            for(int k = 0; k < 4; k++){
                int nr = dr[k] + p.r;
                int nc = dc[k] + p.c;

                if(isRange(nr, nc) && !visited[nr][nc] && (map[nr][nc] == 0 || map[nr][nc] == 2)){
                    q.add(new Point(nr, nc));
                    visited[nr][nc] = true;
                    if(map[nr][nc] == 0) map[nr][nc] = 2;
                }
            }
        }
    }

    static boolean isRange(int r, int c){
        return 0 <= r && r < R && 0 <= c && c < C;
    }

    static class Point{
        int r, c;
        Point(int r, int c){
            this.r = r;
            this.c  = c;
        }

        @Override
        public String toString() {
            return "Point{" +
                    "r=" + r +
                    ", c=" + c +
                    '}';
        }
    }
}