import java.io.*;
import java.util.*;

public class Main {
	
	static int[][] map = new int[10][10];;
	static int[] paper = new int[] {0, 5, 5, 5, 5, 5};;	//종이
	static int oneCnt; 	//붙일 수 있는 칸 수
	static int ans = Integer.MAX_VALUE;; 	//답
	static StringTokenizer st;
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		for(int i = 0; i < 10; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0; j < 10; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				oneCnt += map[i][j];
			}
		}
		
		//System.out.println(Arrays.deepToString(map));
		//System.out.println(oneCnt);
		
		solve(0, 0, 0);
		System.out.println(ans == Integer.MAX_VALUE ? -1 : ans);
	}
	
	static void solve(int r, int cnt, int paperCnt) {
		if(cnt >= ans) return;
		if(oneCnt == paperCnt) {
			ans = Math.min(ans, cnt);
			return;
		}
		
		for(int i = r; i < 10; i++) {
			for(int j = 0; j < 10; j++) {
				if(map[i][j] == 1) {
					boolean flag = false;
					for(int k = 5; k >= 1; k--) {
						if(i+k <= 10 && j+k <= 10 && paper[k] > 0) {
							if(!flag) {
								flag = chkPaper(i, j, k);
							}
							
							if(flag) {
								attachPaper(i, j, k);
								paper[k]--;
								solve(i, cnt+1, paperCnt + k * k);
								paper[k]++;
								attachPaper(i, j, k);
							}
						}
					}
					if(!flag) return;
				}
				if(map[i][j] == 1) return;
			}
		}
	}
	
	static boolean chkPaper(int r, int c, int k) { //색종이를 붙일 수 있는지 확인하는 메서드
		for(int i = r; i < r+k; i++) {
			for(int j = c; j < c+k; j++) {
				if(map[i][j] == 0) return false;
			}
		}
		return true;
	}
	
	static void attachPaper(int r, int c, int k) { //색종이를 붙이는 메서드
		for(int i = r; i < r+k; i++) {
			for(int j = c; j < c+k; j++) {
				map[i][j] = map[i][j] ^ 1; 
			}
		}
	}
}